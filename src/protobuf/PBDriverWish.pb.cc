// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBDriverWish.proto

#include "PBDriverWish.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace PBDriverWish {
class PBDriverWishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBDriverWish> _instance;
} _PBDriverWish_default_instance_;
}  // namespace PBDriverWish
static void InitDefaultsscc_info_PBDriverWish_PBDriverWish_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBDriverWish::_PBDriverWish_default_instance_;
    new (ptr) ::PBDriverWish::PBDriverWish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBDriverWish::PBDriverWish::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBDriverWish_PBDriverWish_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PBDriverWish_PBDriverWish_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PBDriverWish_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_PBDriverWish_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PBDriverWish_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PBDriverWish_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBDriverWish::PBDriverWish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBDriverWish::PBDriverWish, left_servo_),
  PROTOBUF_FIELD_OFFSET(::PBDriverWish::PBDriverWish, right_servo_),
  PROTOBUF_FIELD_OFFSET(::PBDriverWish::PBDriverWish, top_servo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PBDriverWish::PBDriverWish)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBDriverWish::_PBDriverWish_default_instance_),
};

const char descriptor_table_protodef_PBDriverWish_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022PBDriverWish.proto\022\014PBDriverWish\"J\n\014PB"
  "DriverWish\022\022\n\nleft_servo\030\001 \001(\005\022\023\n\013right_"
  "servo\030\002 \001(\005\022\021\n\ttop_servo\030\003 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PBDriverWish_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PBDriverWish_2eproto_sccs[1] = {
  &scc_info_PBDriverWish_PBDriverWish_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PBDriverWish_2eproto_once;
static bool descriptor_table_PBDriverWish_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PBDriverWish_2eproto = {
  &descriptor_table_PBDriverWish_2eproto_initialized, descriptor_table_protodef_PBDriverWish_2eproto, "PBDriverWish.proto", 118,
  &descriptor_table_PBDriverWish_2eproto_once, descriptor_table_PBDriverWish_2eproto_sccs, descriptor_table_PBDriverWish_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_PBDriverWish_2eproto::offsets,
  file_level_metadata_PBDriverWish_2eproto, 1, file_level_enum_descriptors_PBDriverWish_2eproto, file_level_service_descriptors_PBDriverWish_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_PBDriverWish_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_PBDriverWish_2eproto), true);
namespace PBDriverWish {

// ===================================================================

void PBDriverWish::InitAsDefaultInstance() {
}
class PBDriverWish::_Internal {
 public:
};

PBDriverWish::PBDriverWish()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBDriverWish.PBDriverWish)
}
PBDriverWish::PBDriverWish(const PBDriverWish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_servo_, &from.left_servo_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_servo_) -
    reinterpret_cast<char*>(&left_servo_)) + sizeof(top_servo_));
  // @@protoc_insertion_point(copy_constructor:PBDriverWish.PBDriverWish)
}

void PBDriverWish::SharedCtor() {
  ::memset(&left_servo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_servo_) -
      reinterpret_cast<char*>(&left_servo_)) + sizeof(top_servo_));
}

PBDriverWish::~PBDriverWish() {
  // @@protoc_insertion_point(destructor:PBDriverWish.PBDriverWish)
  SharedDtor();
}

void PBDriverWish::SharedDtor() {
}

void PBDriverWish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBDriverWish& PBDriverWish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBDriverWish_PBDriverWish_2eproto.base);
  return *internal_default_instance();
}


void PBDriverWish::Clear() {
// @@protoc_insertion_point(message_clear_start:PBDriverWish.PBDriverWish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_servo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_servo_) -
      reinterpret_cast<char*>(&left_servo_)) + sizeof(top_servo_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PBDriverWish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 left_servo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          left_servo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 right_servo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          right_servo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 top_servo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          top_servo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PBDriverWish::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBDriverWish.PBDriverWish)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 left_servo = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_servo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_servo = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_servo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 top_servo = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_servo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBDriverWish.PBDriverWish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBDriverWish.PBDriverWish)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PBDriverWish::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBDriverWish.PBDriverWish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 left_servo = 1;
  if (this->left_servo() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->left_servo(), output);
  }

  // int32 right_servo = 2;
  if (this->right_servo() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->right_servo(), output);
  }

  // int32 top_servo = 3;
  if (this->top_servo() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->top_servo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBDriverWish.PBDriverWish)
}

::PROTOBUF_NAMESPACE_ID::uint8* PBDriverWish::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBDriverWish.PBDriverWish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 left_servo = 1;
  if (this->left_servo() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->left_servo(), target);
  }

  // int32 right_servo = 2;
  if (this->right_servo() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->right_servo(), target);
  }

  // int32 top_servo = 3;
  if (this->top_servo() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->top_servo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBDriverWish.PBDriverWish)
  return target;
}

size_t PBDriverWish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBDriverWish.PBDriverWish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 left_servo = 1;
  if (this->left_servo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->left_servo());
  }

  // int32 right_servo = 2;
  if (this->right_servo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->right_servo());
  }

  // int32 top_servo = 3;
  if (this->top_servo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->top_servo());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBDriverWish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBDriverWish.PBDriverWish)
  GOOGLE_DCHECK_NE(&from, this);
  const PBDriverWish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBDriverWish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBDriverWish.PBDriverWish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBDriverWish.PBDriverWish)
    MergeFrom(*source);
  }
}

void PBDriverWish::MergeFrom(const PBDriverWish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBDriverWish.PBDriverWish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left_servo() != 0) {
    set_left_servo(from.left_servo());
  }
  if (from.right_servo() != 0) {
    set_right_servo(from.right_servo());
  }
  if (from.top_servo() != 0) {
    set_top_servo(from.top_servo());
  }
}

void PBDriverWish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBDriverWish.PBDriverWish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDriverWish::CopyFrom(const PBDriverWish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBDriverWish.PBDriverWish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDriverWish::IsInitialized() const {
  return true;
}

void PBDriverWish::InternalSwap(PBDriverWish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(left_servo_, other->left_servo_);
  swap(right_servo_, other->right_servo_);
  swap(top_servo_, other->top_servo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBDriverWish::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PBDriverWish
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PBDriverWish::PBDriverWish* Arena::CreateMaybeMessage< ::PBDriverWish::PBDriverWish >(Arena* arena) {
  return Arena::CreateInternal< ::PBDriverWish::PBDriverWish >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
